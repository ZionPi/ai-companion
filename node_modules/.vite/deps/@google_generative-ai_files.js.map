{
  "version": 3,
  "sources": ["browser-external:fs", "../../@google/generative-ai/dist/files/index.mjs"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import { readFileSync } from 'fs';\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Basic error type for this SDK.\n * @public\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message) {\n        super(`[GoogleGenerativeAI Error]: ${message}`);\n    }\n}\n/**\n * Error class covering HTTP errors when calling the server. Includes HTTP\n * status, statusText, and optional details, if provided in the server response.\n * @public\n */\nclass GoogleGenerativeAIFetchError extends GoogleGenerativeAIError {\n    constructor(message, status, statusText, errorDetails) {\n        super(message);\n        this.status = status;\n        this.statusText = statusText;\n        this.errorDetails = errorDetails;\n    }\n}\n/**\n * Errors in the contents of a request originating from user input.\n * @public\n */\nclass GoogleGenerativeAIRequestInputError extends GoogleGenerativeAIError {\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst DEFAULT_API_VERSION = \"v1beta\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */\nconst PACKAGE_VERSION = \"0.12.0\";\nconst PACKAGE_LOG_HEADER = \"genai-js\";\nvar Task;\n(function (Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})(Task || (Task = {}));\n/**\n * Simple, but may become more complex if we add more versions to log.\n */\nfunction getClientHeaders(requestOptions) {\n    const clientHeaders = [];\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        clientHeaders.push(requestOptions.apiClient);\n    }\n    clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);\n    return clientHeaders.join(\" \");\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar FilesTask;\n(function (FilesTask) {\n    FilesTask[\"UPLOAD\"] = \"upload\";\n    FilesTask[\"LIST\"] = \"list\";\n    FilesTask[\"GET\"] = \"get\";\n    FilesTask[\"DELETE\"] = \"delete\";\n})(FilesTask || (FilesTask = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst taskToMethod = {\n    [FilesTask.UPLOAD]: \"POST\",\n    [FilesTask.LIST]: \"GET\",\n    [FilesTask.GET]: \"GET\",\n    [FilesTask.DELETE]: \"DELETE\",\n};\nclass FilesRequestUrl {\n    constructor(task, apiKey, requestOptions) {\n        var _a, _b;\n        this.task = task;\n        this.apiKey = apiKey;\n        this.requestOptions = requestOptions;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;\n        let initialUrl = baseUrl;\n        if (this.task === FilesTask.UPLOAD) {\n            initialUrl += `/upload`;\n        }\n        initialUrl += `/${apiVersion}/files`;\n        this._url = new URL(initialUrl);\n    }\n    appendPath(path) {\n        this._url.pathname = this._url.pathname + `/${path}`;\n    }\n    appendParam(key, value) {\n        this._url.searchParams.append(key, value);\n    }\n    toString() {\n        return this._url.toString();\n    }\n}\nfunction getHeaders(url) {\n    const headers = new Headers();\n    headers.append(\"x-goog-api-client\", getClientHeaders(url.requestOptions));\n    headers.append(\"x-goog-api-key\", url.apiKey);\n    return headers;\n}\nasync function makeFilesRequest(url, headers, body, fetchFn = fetch) {\n    const requestInit = {\n        method: taskToMethod[url.task],\n        headers,\n    };\n    if (body) {\n        requestInit.body = body;\n    }\n    const signal = getSignal(url.requestOptions);\n    if (signal) {\n        requestInit.signal = signal;\n    }\n    try {\n        const response = await fetchFn(url.toString(), requestInit);\n        if (!response.ok) {\n            let message = \"\";\n            let errorDetails;\n            try {\n                const json = await response.json();\n                message = json.error.message;\n                if (json.error.details) {\n                    message += ` ${JSON.stringify(json.error.details)}`;\n                    errorDetails = json.error.details;\n                }\n            }\n            catch (e) {\n                // ignored\n            }\n            throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);\n        }\n        else {\n            return response;\n        }\n    }\n    catch (e) {\n        let err = e;\n        if (!(e instanceof GoogleGenerativeAIFetchError)) {\n            err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);\n            err.stack = e.stack;\n        }\n        throw err;\n    }\n}\n/**\n * Get AbortSignal if timeout is specified\n */\nfunction getSignal(requestOptions) {\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const abortController = new AbortController();\n        const signal = abortController.signal;\n        setTimeout(() => abortController.abort(), requestOptions.timeout);\n        return signal;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class for managing GoogleAI file uploads.\n * @public\n */\nclass GoogleAIFileManager {\n    constructor(apiKey, _requestOptions) {\n        this.apiKey = apiKey;\n        this._requestOptions = _requestOptions;\n    }\n    /**\n     * Upload a file\n     */\n    async uploadFile(filePath, fileMetadata) {\n        const file = readFileSync(filePath);\n        const url = new FilesRequestUrl(FilesTask.UPLOAD, this.apiKey, this._requestOptions);\n        const uploadHeaders = getHeaders(url);\n        const boundary = generateBoundary();\n        uploadHeaders.append(\"X-Goog-Upload-Protocol\", \"multipart\");\n        uploadHeaders.append(\"Content-Type\", `multipart/related; boundary=${boundary}`);\n        const uploadMetadata = getUploadMetadata(fileMetadata);\n        // Multipart formatting code taken from @firebase/storage\n        const metadataString = JSON.stringify({ file: uploadMetadata });\n        const preBlobPart = \"--\" +\n            boundary +\n            \"\\r\\n\" +\n            \"Content-Type: application/json; charset=utf-8\\r\\n\\r\\n\" +\n            metadataString +\n            \"\\r\\n--\" +\n            boundary +\n            \"\\r\\n\" +\n            \"Content-Type: \" +\n            fileMetadata.mimeType +\n            \"\\r\\n\\r\\n\";\n        const postBlobPart = \"\\r\\n--\" + boundary + \"--\";\n        const blob = new Blob([preBlobPart, file, postBlobPart]);\n        const response = await makeFilesRequest(url, uploadHeaders, blob);\n        return response.json();\n    }\n    /**\n     * List all uploaded files\n     */\n    async listFiles(listParams) {\n        const url = new FilesRequestUrl(FilesTask.LIST, this.apiKey, this._requestOptions);\n        if (listParams === null || listParams === void 0 ? void 0 : listParams.pageSize) {\n            url.appendParam(\"pageSize\", listParams.pageSize.toString());\n        }\n        if (listParams === null || listParams === void 0 ? void 0 : listParams.pageToken) {\n            url.appendParam(\"pageToken\", listParams.pageToken);\n        }\n        const uploadHeaders = getHeaders(url);\n        const response = await makeFilesRequest(url, uploadHeaders);\n        return response.json();\n    }\n    /**\n     * Get metadata for file with given ID\n     */\n    async getFile(fileId) {\n        const url = new FilesRequestUrl(FilesTask.GET, this.apiKey, this._requestOptions);\n        url.appendPath(parseFileId(fileId));\n        const uploadHeaders = getHeaders(url);\n        const response = await makeFilesRequest(url, uploadHeaders);\n        return response.json();\n    }\n    /**\n     * Delete file with given ID\n     */\n    async deleteFile(fileId) {\n        const url = new FilesRequestUrl(FilesTask.DELETE, this.apiKey, this._requestOptions);\n        url.appendPath(parseFileId(fileId));\n        const uploadHeaders = getHeaders(url);\n        await makeFilesRequest(url, uploadHeaders);\n    }\n}\n/**\n * If fileId is prepended with \"files/\", remove prefix\n */\nfunction parseFileId(fileId) {\n    if (fileId.startsWith(\"files/\")) {\n        return fileId.split(\"files/\")[1];\n    }\n    if (!fileId) {\n        throw new GoogleGenerativeAIError(`Invalid fileId ${fileId}. ` +\n            `Must be in the format \"files/filename\" or \"filename\"`);\n    }\n    return fileId;\n}\nfunction generateBoundary() {\n    let str = \"\";\n    for (let i = 0; i < 2; i++) {\n        str = str + Math.random().toString().slice(2);\n    }\n    return str;\n}\nfunction getUploadMetadata(inputMetadata) {\n    if (!inputMetadata.mimeType) {\n        throw new GoogleGenerativeAIRequestInputError(\"Must provide a mimeType.\");\n    }\n    const uploadMetadata = {\n        mimeType: inputMetadata.mimeType,\n        displayName: inputMetadata.displayName,\n    };\n    if (inputMetadata.name) {\n        uploadMetadata.name = inputMetadata.name.includes(\"/\")\n            ? inputMetadata.name\n            : `files/${inputMetadata.name}`;\n    }\n    return uploadMetadata;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Processing state of the `File`.\n * @public\n */\nvar FileState;\n(function (FileState) {\n    // The default value. This value is used if the state is omitted.\n    FileState[\"STATE_UNSPECIFIED\"] = \"STATE_UNSPECIFIED\";\n    // File is being processed and cannot be used for inference yet.\n    FileState[\"PROCESSING\"] = \"PROCESSING\";\n    // File is processed and available for inference.\n    FileState[\"ACTIVE\"] = \"ACTIVE\";\n    // File failed processing.\n    FileState[\"FAILED\"] = \"FAILED\";\n})(FileState || (FileState = {}));\n\nexport { FileState, GoogleAIFileManager };\n//# sourceMappingURL=index.mjs.map\n"],
  "mappings": "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",
  "names": ["Task", "FilesTask", "FileState"]
}
